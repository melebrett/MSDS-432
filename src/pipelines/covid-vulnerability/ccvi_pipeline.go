package main

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net"
	"net/http"
	"os"

	"cloud.google.com/go/cloudsqlconn"
	"github.com/jackc/pgx/v4"
	"github.com/jackc/pgx/v4/stdlib"
	_ "github.com/lib/pq"
)

// API endpoint URL
const url = "https://data.cityofchicago.org/resource/xhc6-88s9.json"

// Define struct for individual records
type Community struct {
	GeoType                        string `json:"geography_type"`
	CommunityAreaOrZip             string `json:"community_area_or_zip"`
	CommunityAreaName              string `json:"community_area_name"`
	CCVIScore                      string `json:"ccvi_score"`
	CCVICategory                   string `json:"ccvi_category"`
	RankSocieconomicStatus         string `json:"rank_socioeconomic_status"`
	RankHouseholdComposition       string `json:"rank_household_composition"`
	RankAdultsNoPcp                string `json:"rank_adults_no_pcp"`
	RankCumulativeMobilityRatio    string `json:"rank_cumulative_mobility_ratio"`
	RankFrontlineEssentialWorkers  string `json:"rank_frontline_essential_workers"`
	RankAge65Plus                  string `json:"rank_age_65_plus"`
	RankComorbidConditions         string `json:"rank_comorbid_conditions"`
	RankCovidIncidenceRate         string `json:"rank_covid_19_incidence_rate"`
	RankCovidHospitalAdmissionRate string `json:"rank_covid_19_hospital_admission_rate"`
	RankCovidCrudeMortalityRate    string `json:"rank_covid_19_crude_mortality_rate"`
	Location                       struct {
		LocType     string   `json:"type"`
		Coordinates []string `json:"coordinates"`
	} `json:"location"`
}

var CCVICommunities []Community

func GetAPIrequest(url string) []Community {
	resp, err := http.Get(url)
	if err != nil {
		log.Fatalf("Error: API get request failed. %v", err)
	}
	defer resp.Body.Close()

	// TESTING PRINT
	fmt.Println("API request completed")

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("Error: Failed to read API response: %v", err)
	}

	// TESTING PRINT
	fmt.Println("Response read successfully")

	if err := json.Unmarshal(body, &CCVICommunities); err != nil {
		fmt.Printf("Cannot unmarshal JSON: %v", err)
	}

	return CCVICommunities
}

// function for saving JSON file for testing - eliminate excessive API calls
func SaveTripsJSON(filename string) {
	content, err := json.Marshal(CCVICommunities)
	if err != nil {
		log.Fatalf("Error while marshaling struct: %v", err)
	}
	err = os.WriteFile(filename, content, 0777)
	if err != nil {
		log.Fatalf("Error while writing to json file: %v", err)
	}
}

// function for loading the saved JSON file for testing - eliminate excessive API calls
func LoadTripsJSON(filename string) {
	input, err := os.ReadFile(filename)
	if err != nil {
		log.Fatalf("Error while reading json file %v", err)
	}
	err = json.Unmarshal(input, &CCVICommunities)
	if err != nil {
		log.Fatalf("Error while unmarshaling json to struct: %v", err)
	}
}

func DbConnect() (*sql.DB, error) {
	mustGetenv := func(k string) string {
		v := os.Getenv(k)
		if v == "" {
			log.Fatalf("Fatal Error in connect_connector.go: %s environment variable not set.\n", k)
		}
		return v
	}

	var (
		dbUser                 = mustGetenv("USER")     // e.g. 'my-db-user'
		dbPwd                  = mustGetenv("PASSWORD") // e.g. 'my-db-password'
		dbName                 = mustGetenv("DBNAME")   // e.g. 'my-database'
		instanceConnectionName = mustGetenv("INSTANCE") // e.g. 'project:region:instance'
	)

	dsn := fmt.Sprintf("user=%s password=%s database=%s", dbUser, dbPwd, dbName)
	config, err := pgx.ParseConfig(dsn)
	if err != nil {
		return nil, err
	}
	var opts []cloudsqlconn.Option
	d, err := cloudsqlconn.NewDialer(context.Background(), opts...)
	if err != nil {
		return nil, err
	}
	// Use the Cloud SQL connector to handle connecting to the instance.
	// This approach does *NOT* require the Cloud SQL proxy.
	config.DialFunc = func(ctx context.Context, network, instance string) (net.Conn, error) {
		return d.Dial(ctx, instanceConnectionName)
	}
	dbURI := stdlib.RegisterConnConfig(config)
	dbPool, err := sql.Open("pgx", dbURI)
	if err != nil {
		return nil, fmt.Errorf("sql.Open: %v", err)
	}
	return dbPool, nil
}

func refresh_db_table() {
	db, err := DbConnect()
	if err != nil {
		log.Fatal(err)
	}

	defer db.Close()

	dropTableStatement := "DROP TABLE IF EXISTS covid_vulnerability;"

	_, err = db.Exec(dropTableStatement)
	if err != nil {
		panic(err)
	}
	fmt.Println("Table dropped")

	createTableStatement := `CREATE TABLE covid_vulnerability (
								geo_type                  				TEXT,
								community_area_or_zip                  	TEXT,
								community_area_name      				TEXT,
								ccvi_score        						TEXT,
								ccvi_category             				TEXT,
								rank_socioeconomic_status               TEXT,
								rank_household_composition       		TEXT,
								rank_adults_no_pcp      				TEXT,
								rank_cumulative_mobility_ratio     		TEXT,
								rank_frontline_essential_workers    	TEXT,
								rank_age_65_plus                    	TEXT,
								rank_comorbid_conditions                TEXT,
								rank_covid_incidence_rate               TEXT,
								rank_covid_hospital_admission_rate      TEXT,
								rank_covid_crude_mortality_rate         TEXT,
								location_type             				TEXT,
								latitude	                 			TEXT,
								longitude								TEXT
							);`

	_, err = db.Exec(createTableStatement)
	if err != nil {
		panic(err)
	}
	fmt.Println("Table re-created")
}

func load_to_db(Trips []Community) {
	db, err := DbConnect()
	if err != nil {
		log.Fatal(err)
	}

	defer db.Close()

	insertStatement := `INSERT INTO covid_vulnerability (geo_type, community_area_or_zip, community_area_name, ccvi_score, ccvi_category, rank_socioeconomic_status,	rank_household_composition, rank_adults_no_pcp,	rank_cumulative_mobility_ratio,	rank_frontline_essential_workers, rank_age_65_plus,	rank_comorbid_conditions,	rank_covid_incidence_rate, rank_covid_hospital_admission_rate, rank_covid_crude_mortality_rate,	location_type, latitude, longitude) 
							values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);`

	for _, v := range Trips {
		_, err = db.Exec(insertStatement, v.GeoType, v.CommunityAreaOrZip, v.CommunityAreaName, v.CCVIScore, v.CCVICategory, v.RankSocieconomicStatus, v.RankHouseholdComposition, v.RankAdultsNoPcp, v.RankCumulativeMobilityRatio, v.RankFrontlineEssentialWorkers, v.RankAge65Plus, v.RankComorbidConditions, v.RankCovidIncidenceRate, v.RankCovidHospitalAdmissionRate, v.RankCovidCrudeMortalityRate, v.Location.LocType, v.Location.Coordinates[0], v.Location.Coordinates[1])
		if err != nil {
			fmt.Printf("Error inserting record, GeoType = %v, Community Area or Zip = %v\n", v.GeoType, v.CommunityAreaOrZip)
			log.Fatal(err)
		}
	}
}

func test_successful_insert() {
	db, err := DbConnect()
	if err != nil {
		log.Fatal(err)
	}

	defer db.Close()

	testStatement1 := "SELECT community_area_or_zip FROM covid_vulnerability LIMIT 10"
	rows, err := db.Query(testStatement1)
	if err != nil {
		panic(err)
	}

	defer rows.Close()

	for rows.Next() {
		var CommunityAreaZip string
		err = rows.Scan(&CommunityAreaZip)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Println(CommunityAreaZip)
	}
}

func main() {
	GetAPIrequest(url)

	// // Putting this here to eliminate making API calls over and over while testing
	// SaveTripsJSON("taxi_trips.json")

	// // Loading from json file to avoid unnecessary API calls
	// LoadTripsJSON("taxi_trips.json")

	// Drop and re-create table
	refresh_db_table()

	// Ingest records to DB
	load_to_db(CCVICommunities)

	// Query DB to confirm
	test_successful_insert()

}
